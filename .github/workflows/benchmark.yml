# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Run parallel benchmarks

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - './github/workflows/dotnet.yml'
      - '**.cs'
      - '**.csproj'
      - '**.sln'

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: true
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore Benchmark
        run: dotnet restore
      - name: Build Benchmark
        run: dotnet build -c Release /p:CheckCacheMisses=false
      - name: Run Tests
        run: dotnet test
      - name: Prepare benchmarks list
        run: dotnet run --project Benchmark/Benchmark.csproj -c Release --no-build --list
      - name: Store benchmark list into matrix
        run: echo "::set-output name=matrix::$(jq --raw-input --slurp 'split("\n")' benchmarks.txt)"
  
  run:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        csproj: ${{ fromJson(needs.build.outputs.matrix) }}
    steps:
      - name: ECHO
        run: echo ${{ matrix.benchmark }}
#      - name: Setup .NET
#        uses: actions/setup-dotnet@v4
#        with:
#          dotnet-version: 8.0.x
#          
#      - name: Restore Benchmark
#        run: dotnet restore
#
#      - name: Build Benchmark
#        run: dotnet build -c Release /p:CheckCacheMisses=false
#
#      - name: Run Tests
#        run: dotnet test
#
#      - name: Run Benchmark
#        run: dotnet run --project Benchmark/Benchmark.csproj -c Release --no-build benchmarks=${{ matrix.benchmark }}